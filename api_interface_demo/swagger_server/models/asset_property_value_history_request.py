# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
import re  # noqa: F401,E501
from swagger_server import util


class AssetPropertyValueHistoryRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, asset_id: str=None, max_results: float=None, start_date: str=None, end_date: str=None, time_ordering: str=None, include_prop: List[str]=None):  # noqa: E501
        """AssetPropertyValueHistoryRequest - a model defined in Swagger

        :param asset_id: The asset_id of this AssetPropertyValueHistoryRequest.  # noqa: E501
        :type asset_id: str
        :param max_results: The max_results of this AssetPropertyValueHistoryRequest.  # noqa: E501
        :type max_results: float
        :param start_date: The start_date of this AssetPropertyValueHistoryRequest.  # noqa: E501
        :type start_date: str
        :param end_date: The end_date of this AssetPropertyValueHistoryRequest.  # noqa: E501
        :type end_date: str
        :param time_ordering: The time_ordering of this AssetPropertyValueHistoryRequest.  # noqa: E501
        :type time_ordering: str
        :param include_prop: The include_prop of this AssetPropertyValueHistoryRequest.  # noqa: E501
        :type include_prop: List[str]
        """
        self.swagger_types = {
            'asset_id': str,
            'max_results': float,
            'start_date': str,
            'end_date': str,
            'time_ordering': str,
            'include_prop': List[str]
        }

        self.attribute_map = {
            'asset_id': 'assetId',
            'max_results': 'maxResults',
            'start_date': 'startDate',
            'end_date': 'endDate',
            'time_ordering': 'timeOrdering',
            'include_prop': 'include_prop'
        }
        self._asset_id = asset_id
        self._max_results = max_results
        self._start_date = start_date
        self._end_date = end_date
        self._time_ordering = time_ordering
        self._include_prop = include_prop

    @classmethod
    def from_dict(cls, dikt) -> 'AssetPropertyValueHistoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AssetPropertyValueHistoryRequest of this AssetPropertyValueHistoryRequest.  # noqa: E501
        :rtype: AssetPropertyValueHistoryRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_id(self) -> str:
        """Gets the asset_id of this AssetPropertyValueHistoryRequest.


        :return: The asset_id of this AssetPropertyValueHistoryRequest.
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id: str):
        """Sets the asset_id of this AssetPropertyValueHistoryRequest.


        :param asset_id: The asset_id of this AssetPropertyValueHistoryRequest.
        :type asset_id: str
        """
        if asset_id is None:
            raise ValueError("Invalid value for `asset_id`, must not be `None`")  # noqa: E501

        self._asset_id = asset_id

    @property
    def max_results(self) -> float:
        """Gets the max_results of this AssetPropertyValueHistoryRequest.


        :return: The max_results of this AssetPropertyValueHistoryRequest.
        :rtype: float
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results: float):
        """Sets the max_results of this AssetPropertyValueHistoryRequest.


        :param max_results: The max_results of this AssetPropertyValueHistoryRequest.
        :type max_results: float
        """

        self._max_results = max_results

    @property
    def start_date(self) -> str:
        """Gets the start_date of this AssetPropertyValueHistoryRequest.


        :return: The start_date of this AssetPropertyValueHistoryRequest.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: str):
        """Sets the start_date of this AssetPropertyValueHistoryRequest.


        :param start_date: The start_date of this AssetPropertyValueHistoryRequest.
        :type start_date: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self) -> str:
        """Gets the end_date of this AssetPropertyValueHistoryRequest.


        :return: The end_date of this AssetPropertyValueHistoryRequest.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: str):
        """Sets the end_date of this AssetPropertyValueHistoryRequest.


        :param end_date: The end_date of this AssetPropertyValueHistoryRequest.
        :type end_date: str
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def time_ordering(self) -> str:
        """Gets the time_ordering of this AssetPropertyValueHistoryRequest.


        :return: The time_ordering of this AssetPropertyValueHistoryRequest.
        :rtype: str
        """
        return self._time_ordering

    @time_ordering.setter
    def time_ordering(self, time_ordering: str):
        """Sets the time_ordering of this AssetPropertyValueHistoryRequest.


        :param time_ordering: The time_ordering of this AssetPropertyValueHistoryRequest.
        :type time_ordering: str
        """
        allowed_values = ["ASCENDING", "DESCENDING"]  # noqa: E501
        if time_ordering not in allowed_values:
            raise ValueError(
                "Invalid value for `time_ordering` ({0}), must be one of {1}"
                .format(time_ordering, allowed_values)
            )

        self._time_ordering = time_ordering

    @property
    def include_prop(self) -> List[str]:
        """Gets the include_prop of this AssetPropertyValueHistoryRequest.


        :return: The include_prop of this AssetPropertyValueHistoryRequest.
        :rtype: List[str]
        """
        return self._include_prop

    @include_prop.setter
    def include_prop(self, include_prop: List[str]):
        """Sets the include_prop of this AssetPropertyValueHistoryRequest.


        :param include_prop: The include_prop of this AssetPropertyValueHistoryRequest.
        :type include_prop: List[str]
        """

        self._include_prop = include_prop
