# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AssetProperty(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, property_name: str=None, asset_id: str=None, data_type: str=None, value: str=None):  # noqa: E501
        """AssetProperty - a model defined in Swagger

        :param property_name: The property_name of this AssetProperty.  # noqa: E501
        :type property_name: str
        :param asset_id: The asset_id of this AssetProperty.  # noqa: E501
        :type asset_id: str
        :param data_type: The data_type of this AssetProperty.  # noqa: E501
        :type data_type: str
        :param value: The value of this AssetProperty.  # noqa: E501
        :type value: str
        """
        self.swagger_types = {
            'property_name': str,
            'asset_id': str,
            'data_type': str,
            'value': str
        }

        self.attribute_map = {
            'property_name': 'propertyName',
            'asset_id': 'assetId',
            'data_type': 'dataType',
            'value': 'value'
        }
        self._property_name = property_name
        self._asset_id = asset_id
        self._data_type = data_type
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'AssetProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AssetProperty of this AssetProperty.  # noqa: E501
        :rtype: AssetProperty
        """
        return util.deserialize_model(dikt, cls)

    @property
    def property_name(self) -> str:
        """Gets the property_name of this AssetProperty.


        :return: The property_name of this AssetProperty.
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name: str):
        """Sets the property_name of this AssetProperty.


        :param property_name: The property_name of this AssetProperty.
        :type property_name: str
        """

        self._property_name = property_name

    @property
    def asset_id(self) -> str:
        """Gets the asset_id of this AssetProperty.


        :return: The asset_id of this AssetProperty.
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id: str):
        """Sets the asset_id of this AssetProperty.


        :param asset_id: The asset_id of this AssetProperty.
        :type asset_id: str
        """

        self._asset_id = asset_id

    @property
    def data_type(self) -> str:
        """Gets the data_type of this AssetProperty.


        :return: The data_type of this AssetProperty.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type: str):
        """Sets the data_type of this AssetProperty.


        :param data_type: The data_type of this AssetProperty.
        :type data_type: str
        """
        allowed_values = ["integerValue", "stringValue", "doubleValue", "booleanValue"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def value(self) -> str:
        """Gets the value of this AssetProperty.


        :return: The value of this AssetProperty.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this AssetProperty.


        :param value: The value of this AssetProperty.
        :type value: str
        """

        self._value = value
