# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SensorType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, sensor_type: str=None):  # noqa: E501
        """SensorType - a model defined in Swagger

        :param sensor_type: The sensor_type of this SensorType.  # noqa: E501
        :type sensor_type: str
        """
        self.swagger_types = {
            'sensor_type': str
        }

        self.attribute_map = {
            'sensor_type': 'sensorType'
        }
        self._sensor_type = sensor_type

    @classmethod
    def from_dict(cls, dikt) -> 'SensorType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SensorType of this SensorType.  # noqa: E501
        :rtype: SensorType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sensor_type(self) -> str:
        """Gets the sensor_type of this SensorType.


        :return: The sensor_type of this SensorType.
        :rtype: str
        """
        return self._sensor_type

    @sensor_type.setter
    def sensor_type(self, sensor_type: str):
        """Sets the sensor_type of this SensorType.


        :param sensor_type: The sensor_type of this SensorType.
        :type sensor_type: str
        """
        allowed_values = ["SENSOR_NODE", "ASSET_SENSOR"]  # noqa: E501
        if sensor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sensor_type` ({0}), must be one of {1}"
                .format(sensor_type, allowed_values)
            )

        self._sensor_type = sensor_type
